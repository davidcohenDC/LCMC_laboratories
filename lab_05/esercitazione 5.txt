Correzione esercizi per casa

1) Dire qual è il linguaggio riconosciuto (per stato finale) dal PDA "esercizio7.jff".

2) Applicare la trasformazione standard per costruire una CFG a partire dal PDA esercizio6.jff (che riconosce **per pila vuota**) e rinominare le variabili che sono triple in variabili A, B, C... etc.

-------------------------------
ESERCIZI SU PUMPING LEMMA PER LINGUAGGI LIBERI
-------------------------------

1. Dimostrare con il pumping lemma dei linguaggi liberi che a^m b^m c^m non è libero dal contesto.

Dimostrazione per assurdo:
Supponiamo che sia un linguaggio libero dal contesto. Allora, per il pumping lemma dei linguaggi liberi, deve valere che:
esiste n ? 1 per cui ogni stringa z in L con lunghezza |z| ? n è scomponibile in uvwxy tale che:
- |vwx| ? n
- |vw| > 0
- uv^i wx^i y appartiene a L per ogni i ? 0.

Scegliamo z = a^n b^n c^n, che appartiene a L e ha lunghezza ? n (lunghezza 3n).
Dato che |vwx| ? n, vwx può coinvolgere al massimo un solo gruppo o al limite due gruppi adiacenti (ad esempio, ab, bc, a, b o c).
Se eliminiamo un simbolo (i = 0), avremo che almeno un gruppo mantiene la lunghezza n, mentre un altro gruppo perde simboli, contraddicendo la struttura a^n b^n c^n. Pertanto, L non è libero dal contesto.

2. Dimostrare con il pumping lemma dei linguaggi liberi che il linguaggio delle stringhe su alfabeto {a, b, c} che hanno lo stesso numero di "a", "b" e "c" non è libero dal contesto.

Dimostrazione per assurdo:
Supponiamo che sia un linguaggio libero dal contesto. Allora, per il pumping lemma dei linguaggi liberi, deve valere che:
esiste n ? 1 per cui ogni stringa z in L con lunghezza |z| ? n è scomponibile in uvwxy tale che:
- |vwx| ? n
- |vw| > 0
- uv^i wx^i y appartiene a L per ogni i ? 0.

Scegliamo z = a^n b^n c^n (o qualsiasi altra permutazione delle lettere a, b, c), che appartiene a L e ha lunghezza ? n (lunghezza 3n).
Dato che |vwx| ? n, vwx può coinvolgere al massimo un solo gruppo o due gruppi adiacenti.
Se eliminiamo un simbolo (i = 0), almeno un gruppo rimarrà invariato e un altro perderà simboli, violando la condizione che i conteggi di "a", "b" e "c" siano uguali. Pertanto, L non è libero dal contesto.

3. Dimostrare con il pumping lemma dei linguaggi liberi che il linguaggio delle stringhe su alfabeto {a, b, c} tali che il numero di "a" è minore del numero di "b" e il numero di "b" è uguale al numero di "c" non è libero dal contesto.

Dimostrazione per assurdo:
Supponiamo che sia un linguaggio libero dal contesto. Allora, per il pumping lemma dei linguaggi liberi, deve valere che:
esiste n ? 1 per cui ogni stringa z in L con lunghezza |z| ? n è scomponibile in uvwxy tale che:
- |vwx| ? n
- |vw| > 0
- uv^i wx^i y appartiene a L per ogni i ? 0.

Scegliamo z = a^n b^(n+1) c^(n+1), che appartiene a L e ha lunghezza ? n.
- Se vwx contiene almeno una "a", allora con i = 2 (uv^2 wx^2 y), la condizione #a < #b < #c non è più valida.
- Se contiene b o c, ma non tutte, con i = 0 (uv^0 wx^0 y) perderà almeno un simbolo "b" o "c", violando le condizioni. Quindi, L non è libero dal contesto.

4. Dimostrare con il pumping lemma dei linguaggi liberi che il linguaggio delle stringhe su alfabeto {a, b, c} tali che il numero di "a" è minore del numero di "b" e il numero di "b" è minore del numero di "c" non è libero dal contesto.

Dimostrazione per assurdo:
Supponiamo che sia un linguaggio libero dal contesto. Allora, per il pumping lemma dei linguaggi liberi, deve valere che:
esiste n ? 1 per cui ogni stringa z in L con lunghezza |z| ? n è scomponibile in uvwxy tale che:
- |vwx| ? n
- |vw| > 0
- uv^i wx^i y appartiene a L per ogni i ? 0.

Scegliamo z = a^n b^(n+1) c^(n+2), che appartiene a L e ha lunghezza ? n.
- Se vwx contiene simboli "a", con i = 2, la condizione #a < #b < #c non sarà più valida.
- Se contiene b o c, con i = 0, si perderà almeno una "b" o una "c", violando la struttura #a < #b < #c. Pertanto, L non è libero dal contesto.

-------------------------------
ESERCIZI DI CLASSIFICAZIONE
-------------------------------

5. Dire se il linguaggio ww, con w stringa su alfabeto {0,1} è, o meno, libero dal contesto e dimostrare la propria affermazione.

No, non è libero dal contesto. Posso al massimo riconoscere linguaggi della forma ww^R (dove w^R è w invertita) con un automa a pila, ma non ww. Lo dimostro con il pumping lemma.

Dimostrazione per assurdo:
Supponiamo che sia un linguaggio libero dal contesto. Allora, per il pumping lemma dei linguaggi liberi, deve valere che:
esiste n ? 1 per cui ogni stringa z in L con lunghezza |z| ? n è scomponibile in uvwxy tale che:
- |vwx| ? n
- |vw| > 0
- uv^i wx^i y appartiene a L per ogni i ? 0.

Scegliamo z = 0^n 1 0^n 1, che appartiene a L e ha lunghezza ? n.
Dato che vwx può toccare al massimo due gruppi adiacenti, pompare porterà la stringa fuori dal linguaggio ww perché romperà la struttura duplicata.

6. Considerare il linguaggio L delle stringhe su alfabeto {a, b} per cui il numero delle "a" è diverso dal numero delle "b". L è un linguaggio libero? In caso affermativo, mostrare un automa a pila che lo riconosca per stato finale; altrimenti mostrare che non è libero con il pumping lemma dei liberi.

Sì, L è libero dal contesto. Si può riconoscere utilizzando un automa a pila che gestisce un'eccedenza. 
Per ogni "a" spinge "a" sulla pila, per ogni "b" spinge "b", e accetta quando la pila contiene una quantità non bilanciata di "a" o "b".

-----------------------------------------------------------------------------
REALIZZAZIONE DI UN LEXER CON ANTLR4 (SimpleExp.g4)
-----------------------------------------------------------------------------

1) Realizziamo, con ANTLR4, un lexer che includa i seguenti token (in ordine di priorità, da quello a priorità più alta a quello a priorità più bassa):

- PLUS    associato ai lessemi: la sola stringa '+'
- TIMES   associato ai lessemi: la sola stringa '*'
- LPAR    associato ai lessemi: la sola stringa '('
- RPAR    associato ai lessemi: la sola stringa ')'
- NUM     associato ai lessemi: la stringa '0' oppure una stringa composta da una cifra tra '1' e '9' seguita da una qualsiasi quantità (anche nessuna) di cifre tra '0' e '9'
- WHITESP associato ai lessemi: una stringa composta da una qualsiasi quantità (almeno uno) di caratteri ' ', '\t', '\n' oppure '\r'
- ERR     associato ai lessemi: stringhe formate da un carattere qualsiasi

I token WHITESP ed ERR non devono essere inviati al parser; ed il token ERR corrisponde a una condizione di errore (gli errori devono essere contati e segnalati all'utente).

2) Aggiungiamo al nostro lexer il seguente token "problematico":
- COMMENT associato ai lessemi: una stringa che inizia con '/*', contiene una qualsiasi quantità (anche nessuna) di caratteri qualsiasi, e termina con '*/'

Nel realizzare la specifica per il lexer, fare attenzione alla regola di maximal-match, applicata per default da ANTLR.

-----------------------------------------------------------------------------
REALIZZAZIONE DI UN PARSER CON ANTLR4 (SimpleExp.g4)
-----------------------------------------------------------------------------

Realizziamo, con ANTLR4, un parser per la grammatica delle espressioni con operatori + e * vista a lezione. 
ANTLR4 consente di utilizzare grammatiche ambigue come 

E -> E+E | E*E | (E) | n

dichiarando esplicitamente priorità e associatività per i vari operatori.

PRIORITÀ
ordine in cui sono scritte le produzioni di una variabile: la prima produzione ha la priorità più alta (quindi scriveremo per prima quella dell'operatore "*").

ASSOCIATIVITÀ
per ogni produzione (operatore) si ha associatività: 
- a destra, se si specifica <assoc=right> prima del corpo della produzione; 
- a sinistra, se non si specifica nulla (associatività a sinistra è default)

1) Inseriamo la grammatica sopra in ANTLR4 (file SimpleExp.g4) dando priorità al "*" e associatività a sinistra ad entrambi gli operatori. Aggiungiamo il token speciale EOF alla grammatica per effettuare il parsing completo del file.

2) Creiamo un file main "Test.java" per testare il parser/lexer generato automaticamente da ANTLR4 con il testo nel file "prova.txt" come input.

ESEMPIO: 
3+(4+2+7)*5 con eventuali spazi/commenti ed errori lessicali e sintattici

3) Mostriamo come sarebbe banale modificare SimpleExp.g4 in caso volessimo la associatività a destra per entrambi gli operatori.

-----------------------------------------------------------------------------
VISITA DEL SYNTAX TREE TRAMITE VISITOR PATTERN: CALCOLO RISULTATO ESPRESSIONE
-----------------------------------------------------------------------------

Possiamo calcolare il risultato di un'espressione visitando il relativo albero sintattico, che ANTLR4 genera esplicitamente come un albero di oggetti. Ogni nodo interno dell'albero è di classe "XxxContext" dove "xxx" è il nome di una variabile della grammatica.

In ANTLR4, è possibile dare un nome a ciascuna produzione di una variabile (es. "exp") tramite un tag #nome.

1) Consideriamo la grammatica SimpleExp.g4 e diamo un nome a ciascuna produzione della variabile "exp" (usiamo "expProd1" per la prima produzione, "expProd2" per la seconda, ecc...). La variabile iniziale "prog" ha un'unica produzione, quindi non è necessario dare nomi alle sue produzioni per identificarle.

2) Costruiamo una classe visitor "SimpleCalcSTVisitor.java" per calcolare il risultato delle espressioni. La classe eredita dalla classe generata automaticamente da ANTLR4, di nome SimpleExpBaseVisitor<E> dove scegliamo Integer come parametro "E" per rappresentare il risultato intero.

ESEMPIO: 3+(4+2+7)*5

3) Dotiamo le stampe effettuate durante la visita di indentazione per visualizzare l'albero sintattico generato automaticamente da ANTLR4.

-----------------
ESERCIZI PER CASA
-----------------

1) Si consideri il linguaggio L delle stringhe su alfabeto {a, b, c} per cui non vale che il numero delle "a", delle "b" e delle "c" è lo stesso (vi sono almeno due tra "a", "b" e "c" per cui la quantità delle une è diversa dalla quantità delle altre). Dire se il linguaggio L è, o meno, libero dal contesto e dimostrare la propria affermazione. Qual è il linguaggio complementare di L?

SI
abcc
aabcc
aabbbcccc
aabccc

NO
?
abc

2) Provare a sostituire, in SimpleExp.g4 e in SimpleCalcSTVisitor.java, l'operatore "+" con l'operatore "-" e confrontare il risultato ottenuto impostando l'associatività a destra con quella a sinistra.
ESEMPIO: 3-(4-2-7)*5 = -42
